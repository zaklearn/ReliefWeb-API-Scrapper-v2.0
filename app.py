"""
Application Streamlit - Assistant de Carri√®re
Interface principale et orchestration du pipeline
"""
import streamlit as st
import pandas as pd
from reliefweb_client import find_job_urls
from scraper import scrape_job_description
from gemini_analyzer import get_compatibility_analysis
from report_utils import generate_excel_export
from config import SEARCH_QUERIES
from credits import initialize_credits, show_credits_fixed_footer


# Configuration de la page
st.set_page_config(
    page_title="Assistant de Carri√®re",
    page_icon="üíº",
    layout="wide"
)
# Initialiser les cr√©dits dans la sidebar
#initialize_credits(location="sidebar", language="fr")

@st.cache_data(show_spinner=False)
def run_full_analysis(api_key: str, max_jobs: int = None):
    """
    Ex√©cute le pipeline complet d'analyse des offres d'emploi.
    
    Args:
        api_key: Cl√© API Gemini
        max_jobs: Nombre maximum d'offres √† analyser (None = toutes)
        
    Returns:
        Liste de dictionnaires contenant les r√©sultats d'analyse
    """
    results = []
    
    # √âtape 1: Recherche des URLs
    with st.spinner("üîç Recherche des offres d'emploi sur ReliefWeb..."):
        job_urls = find_job_urls(SEARCH_QUERIES)
    
    if not job_urls:
        st.warning("Aucune offre d'emploi trouv√©e.")
        return results
    
    # Limiter le nombre d'offres si sp√©cifi√©
    if max_jobs:
        job_urls = job_urls[:max_jobs]
    
    st.info(f"üìä {len(job_urls)} offres trouv√©es. Analyse en cours...")
    
    # √âtape 2: Analyse de chaque offre
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for idx, url in enumerate(job_urls):
        status_text.text(f"Analyse de l'offre {idx + 1}/{len(job_urls)}...")
        
        # Scraping
        job_text = scrape_job_description(url)
        
        if not job_text:
            st.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer le contenu de: {url}")
            continue
        
        # Analyse avec Gemini
        analysis = get_compatibility_analysis(job_text, api_key)
        
        # Stocker les r√©sultats
        result = {
            "URL": url,
            "Verdict": analysis["verdict"],
            "Score": analysis["score_pertinence"],
            "Analyse": analysis["analyse_succincte"],
            "Points Forts": ", ".join(analysis["points_forts"]),
            "Points Faibles": ", ".join(analysis["points_faibles"])
        }
        results.append(result)
        
        # Mise √† jour de la barre de progression
        progress_bar.progress((idx + 1) / len(job_urls))
    
    progress_bar.empty()
    status_text.empty()
    
    return results


# Interface utilisateur
st.title("üíº Assistant de Carri√®re Intelligent")
st.markdown("Analyse automatique de compatibilit√© des offres d'emploi ReliefWeb")

# Barre lat√©rale
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")
    
    api_key = st.text_input(
        "Cl√© API Gemini",
        type="password",
        help="Entrez votre cl√© API Google Gemini"
    )
    
    max_jobs = st.number_input(
        "Nombre max d'offres √† analyser",
        min_value=1,
        max_value=100,
        value=10,
        help="Limiter le nombre d'offres pour un test rapide"
    )
    
    st.markdown("---")
    st.markdown("### üìã Cat√©gories de recherche")
    for category, queries in SEARCH_QUERIES.items():
        st.markdown(f"**{category}**")
        for query in queries:
            st.markdown(f"- {query}")

# Bouton principal
if st.button("üöÄ Lancer l'analyse", type="primary", use_container_width=True):
    if not api_key:
        st.error("‚ö†Ô∏è Veuillez entrer votre cl√© API Gemini dans la barre lat√©rale.")
    else:
        # Ex√©cuter l'analyse
        results = run_full_analysis(api_key, max_jobs)
        
        if results:
            st.success(f"‚úÖ Analyse termin√©e ! {len(results)} offres analys√©es.")
            
            # Afficher les r√©sultats
            df = pd.DataFrame(results)
            
            # Tri par score d√©croissant
            df = df.sort_values("Score", ascending=False)
            
            # Affichage avec couleurs conditionnelles
            st.subheader("üìä R√©sultats de l'analyse")
            
            # Cr√©er des onglets pour les diff√©rentes vues
            tab1, tab2, tab3 = st.tabs(["üìã Tableau complet", "‚úÖ Compatibles", "üìà Statistiques"])
            
            with tab1:
                st.dataframe(
                    df,
                    use_container_width=True,
                    column_config={
                        "URL": st.column_config.LinkColumn("Lien"),
                        "Score": st.column_config.ProgressColumn(
                            "Score",
                            format="%d",
                            min_value=0,
                            max_value=100
                        )
                    }
                )
            
            with tab2:
                compatibles = df[df["Verdict"].str.contains("COMPATIBLE", na=False)]
                st.write(f"**{len(compatibles)} offres compatibles trouv√©es**")
                st.dataframe(compatibles, use_container_width=True)
            
            with tab3:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Score moyen", f"{df['Score'].mean():.1f}")
                with col2:
                    st.metric("Score maximum", f"{df['Score'].max():.0f}")
                with col3:
                    compatible_count = len(df[df["Verdict"] == "COMPATIBLE"])
                    st.metric("Taux de compatibilit√©", f"{compatible_count/len(df)*100:.1f}%")
            
            # Bouton d'export
            st.markdown("---")
            excel_data = generate_excel_export(df)
            st.download_button(
                label="üì• T√©l√©charger les r√©sultats (Excel)",
                data=excel_data,
                file_name="resultats_analyse_emploi.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("Aucun r√©sultat √† afficher.")

# Instructions
with st.expander("‚ÑπÔ∏è Comment utiliser cette application"):
    st.markdown("""
    1. **Entrez votre cl√© API Gemini** dans la barre lat√©rale
    2. **Ajustez le nombre maximum d'offres** √† analyser (optionnel)
    3. **Cliquez sur "Lancer l'analyse"** pour d√©marrer
    4. **Consultez les r√©sultats** dans les diff√©rents onglets
    5. **T√©l√©chargez le rapport Excel** pour une analyse approfondie
    
    L'application recherche automatiquement les offres d'emploi sur ReliefWeb,
    les analyse avec l'IA Gemini, et vous fournit un verdict de compatibilit√©
    bas√© sur votre profil (configur√© dans `config.py`).
    """)

# Footer avec cr√©dits
show_credits_fixed_footer(language="fr")